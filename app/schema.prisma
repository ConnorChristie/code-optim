datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  repositories              Repository[]
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

model WaitlistEntry {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  email                     String          @unique
  name                      String?
  company                   String?
  githubUsername            String?
  githubUrl                 String?
  isInvited                 Boolean         @default(false)
  invitedAt                 DateTime?
}

// Code Optimization Models
model Repository {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  url                       String
  branch                    String          @default("main")
  language                  String
  framework                 String?
  
  // Configuration
  maxSpendPerMonth          Float           @default(10.0)
  maxConcurrency           Int             @default(2)
  perfTargetPercent        Float           @default(5.0)
  maxWallClockHours        Float           @default(2.0)
  llmModel                 String          @default("gpt-4o-mini")
  
  jobs                      OptimizationJob[]
  
  @@unique([userId, name])
}

model OptimizationJob {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  completedAt               DateTime?

  repository                Repository      @relation(fields: [repositoryId], references: [id])
  repositoryId              String

  status                    JobStatus       @default(QUEUED)
  priority                  JobPriority     @default(MEDIUM)
  
  // Budget tracking
  totalCostUsd              Float           @default(0.0)
  totalTokens               Int             @default(0)
  totalCiMinutes            Float           @default(0.0)
  
  // Performance tracking
  baselinePerformance       Json?           // Baseline metrics
  currentPerformance        Json?           // Current metrics
  targetImprovement         Float           @default(5.0)
  actualImprovement         Float           @default(0.0)
  
  // Metadata
  config                    Json?           // Job configuration
  error                     String?         // Error message if failed
  
  agents                    AgentExecution[]
  metrics                   JobMetric[]
  patches                   CodePatch[]
  
  @@index([status])
  @@index([createdAt])
}

model AgentExecution {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  completedAt               DateTime?

  job                       OptimizationJob @relation(fields: [jobId], references: [id])
  jobId                     String

  agentType                 AgentType
  status                    AgentStatus     @default(PENDING)
  
  // Resource tracking
  costUsd                   Float           @default(0.0)
  tokens                    Int             @default(0)
  executionTimeMs           Int             @default(0)
  
  // Input/Output
  input                     Json?
  output                    Json?
  error                     String?
  
  // Heartbeat for monitoring
  lastHeartbeat             DateTime?
  
  @@index([jobId])
  @@index([agentType])
  @@index([status])
}

model CodePatch {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  job                       OptimizationJob @relation(fields: [jobId], references: [id])
  jobId                     String

  filePath                  String
  originalCode              String
  patchedCode               String
  diff                      String
  
  // Metrics
  compilationSuccess        Boolean         @default(false)
  testsPass                 Boolean         @default(false)
  performanceImprovement    Float           @default(0.0)
  
  // Status
  status                    PatchStatus     @default(GENERATED)
  appliedAt                 DateTime?
  
  @@index([jobId])
  @@index([status])
}

model JobMetric {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  job                       OptimizationJob @relation(fields: [jobId], references: [id])
  jobId                     String

  metricName                String
  metricValue               Float
  metricUnit                String
  stage                     String          // baseline, analyze, patch, etc.
  
  @@index([jobId])
  @@index([metricName])
  @@index([createdAt])
}



// Enums
enum JobStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  BUDGET_EXCEEDED
  TIMEOUT
}

enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AgentType {
  BUILDER
  ANALYZER
  REFACTORER
  BENCHMARK_RUNNER
  REVIEWER
}

enum AgentStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  TIMEOUT
  BUDGET_EXCEEDED
}

enum PatchStatus {
  GENERATED
  COMPILED
  TESTED
  BENCHMARKED
  APPLIED
  REJECTED
}
